<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Brain-teaser | Kutup]]></title>
  <link href="http://taylansengul.github.io/blog/categories/brain-teaser/atom.xml" rel="self"/>
  <link href="http://taylansengul.github.io/"/>
  <updated>2014-01-22T14:48:32-05:00</updated>
  <id>http://taylansengul.github.io/</id>
  <author>
    <name><![CDATA[Taylan Sengul]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Much Would You Pay to Play This Game?]]></title>
    <link href="http://taylansengul.github.io/blog/2013/12/28/how-much-would-you-pay-to-play-this-game/"/>
    <updated>2013-12-28T06:59:56-05:00</updated>
    <id>http://taylansengul.github.io/blog/2013/12/28/how-much-would-you-pay-to-play-this-game</id>
    <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>Consider the following game. You are playing a die game where you gain x dollars if the result of the rolled die turns out to be x. If you do not like the outcome, you are given a second try and if you do not like the outcome of the second try, you are given a third try. How much would you pay to play this game?</p>

<h2 id="solution">Solution</h2>
<p>As a rational person, you are willing to pay anything less than your expected gain to play this game. And your expected gain depends on your strategy. So first, let’s find the best possible strategy for this game.</p>

<p>If you are in your last try, then you have no choice but to accept the outcome. In this case, your expected gain is $3.5 (\( 3.5 = 1\times \frac{1}{6} + \cdots 6 \times \frac{1}{6}\)). So in your second try, you should only accept a 4, 5 or 6. Because they all beat your expected earning in your last try. So with this best strategy at second try, our expectation is $3.5 if the outcome is 1, 2, 3 and $x if x is 4, 5, 6. This yields an expected gain of
\[
4.25 = 3.5 \times \frac{1}{2} + 4 \times \frac{1}{6} + 5 \times \frac{1}{6} + 6 \times \frac{1}{6} = 1.75 + 2.5
\]
in dollars. Hence in your first try, you should only accept a 5 or 6; accepting anything less than your expected gain ($4.25) is meaningless.</p>

<p>So let’s summarize the best strategy: in your first try, only accept 5 or 6. In your second try, only accept 4, 5 or 6. You have no choice for the third try. With this strategy, your expectation is $4.25 if the first die is 1, 2, 3 or 4 and $x if x is 5 or 6. Thus the expectation of the best strategy in dollars is
\[
4.25 \times \frac{4}{6} + 5 \times \frac{1}{6} + 6 \times \frac{1}{6} = 4.67.
\]</p>

<p>Thus you should agree to pay anything less than $4.67 to play this game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python Solution of Failed Twitter Interview Problem With Sketches]]></title>
    <link href="http://taylansengul.github.io/blog/2013/12/27/failed-twitter-interview/"/>
    <updated>2013-12-27T15:30:10-05:00</updated>
    <id>http://taylansengul.github.io/blog/2013/12/27/failed-twitter-interview</id>
    <content type="html"><![CDATA[<p>This is my shot at the <a href="http://qandwhat.apps.runkite.com/i-failed-a-twitter-interview/">failed Twitter interview problem</a> with a few extras using Python. The problem is this, given an array of wall heights, find the amount of water filled between these walls after a heavy rain. Suppose the given array is <code>[2,5,1,2,3,4,7,7,6]</code>, then the corresponding picture is:</p>

<pre><code>       WW 
       WWW
 W     WWW
 W     WWW
 W W   WWW
WW W W WWW
WWWWWWWWWW
2513121776
</code></pre>

<p>To get the picture, we define the following function</p>

<pre><code>from __future__ import print_function
def draw_walls(walls):
    """Print an array of wall heights"""
    M = max(walls)  # no of rows
    N = len(walls)  # no of columns
    for i in range(M, 0, -1):
        for j in range(N):
            if walls[j] &gt;= i:
                print('W', end='')
            else:
                print(' ', end='')
        print()
    for i in range(N):
        print(walls[i], end='')
</code></pre>

<p>and then call</p>

<pre><code>draw_walls([2,5,1,2,3,4,7,7,6])
</code></pre>

<p>Anyway, a clever solution is also given in the <a href="http://qandwhat.apps.runkite.com/i-failed-a-twitter-interview/">blog page</a>. Here in addition to finding the total number of filled spaces, the following code will also sketch the walls and the water filled in the walls.</p>

<p>For example, calling</p>

<pre><code>walls = [2, 5, 1, 3, 1, 2, 1, 7, 7, 6]
filled = draw_filled_walls(walls)
print("%d filled spaces" % filled)
</code></pre>

<p>will give</p>

<pre><code>       WW 
       WWW
 W-----WWW
 W-----WWW
 W-W---WWW
WW-W-W-WWW
WWWWWWWWWW
     
17 filled spaces
</code></pre>

<p>Here is my <a href="https://gist.github.com/taylansengul/8158583">solution</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hat-check Problem]]></title>
    <link href="http://taylansengul.github.io/blog/2013/12/24/hat-check-problem/"/>
    <updated>2013-12-24T17:49:11-05:00</updated>
    <id>http://taylansengul.github.io/blog/2013/12/24/hat-check-problem</id>
    <content type="html"><![CDATA[<p>Each of \(n\) customers gives a hat to a hat-check person at a restaurant. The hat-check person gives the hats back to the customers in a random order. What is the expected number of customers who get back their own hat?</p>

<h2 id="solution">Solution</h2>
<p>Let \(X_i\) be 1 if i-th customer gets own hat back and 0 otherwise. 
Clearly
\[
E[X_i] = 0 \times Pr(X_i = 0) + 1 \times Pr(X_i = 1) = 0 + 1 \times 1/n = 1/n.
\]
Let \(X\) be the number of customers who get back their own hat.
Then <script type="math/tex">X = \sum_{i=1}^n X_i.</script>
By linearity 
\[ E[X] = \sum_{i=1}^n E[X_i] = 1. \]</p>
]]></content>
  </entry>
  
</feed>
