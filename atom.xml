<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kutup]]></title>
  <link href="http://taylansengul.github.io/atom.xml" rel="self"/>
  <link href="http://taylansengul.github.io/"/>
  <updated>2013-12-28T04:54:48-08:00</updated>
  <id>http://taylansengul.github.io/</id>
  <author>
    <name><![CDATA[Taylan Sengul]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Much Would You Pay to Play This Game?]]></title>
    <link href="http://taylansengul.github.io/blog/2013/12/28/how-much-would-you-pay-to-play-this-game/"/>
    <updated>2013-12-28T03:59:56-08:00</updated>
    <id>http://taylansengul.github.io/blog/2013/12/28/how-much-would-you-pay-to-play-this-game</id>
    <content type="html"><![CDATA[<h2 id="problem">Problem</h2>
<p>Consider the following game. You are playing a die game where you gain x dollars if the result of the rolled die turns out to be x. If you do not like the outcome, you are given a second try and if you do not like the outcome of the second try, you are given a third try. How much would you pay to play this game?</p>

<h2 id="solution">Solution</h2>
<p>As a rational person, you are willing to pay anything less than your expected gain to play this game. And your expected gain depends on your strategy. So first, let’s find the best possible strategy for this game.</p>

<p>If you are in your last try, then you have no choice but to accept the outcome. In this case, your expected gain is $3.5 (\( 3.5 = 1\times \frac{1}{6} + \cdots 6 \times \frac{1}{6}\)). So in your second try, you should only accept a 4, 5 or 6. Because they all beat your expected earning in your last try. So with this best strategy at second try, our expectation is $3.5 if the outcome is 1, 2, 3 and $x if x is 4, 5, 6. This yields an expected gain of
\[
4.25 = 3.5 \times \frac{1}{2} + 4 \times \frac{1}{6} + 5 \times \frac{1}{6} + 6 \times \frac{1}{6} = 1.75 + 2.5
\]
in dollars. Hence in your first try, you should only accept a 5 or 6; accepting anything less than your expected gain ($4.25) is meaningless.</p>

<p>So let’s summarize the best strategy: in your first try, only accept 5 or 6. In your second try, only accept 4, 5 or 6. You have no choice for the third try. With this strategy, your expectation is $4.25 if the first die is 1, 2, 3 or 4 and $x if x is 5 or 6. Thus the expectation of the best strategy in dollars is
\[
4.25 \times \frac{4}{6} + 5 \times \frac{1}{6} + 6 \times \frac{1}{6} = 4.67.
\]</p>

<p>Thus you should agree to pay anything less than $4.67 to play this game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python Solution of Failed Twitter Interview Problem With Sketches]]></title>
    <link href="http://taylansengul.github.io/blog/2013/12/27/failed-twitter-interview/"/>
    <updated>2013-12-27T12:30:10-08:00</updated>
    <id>http://taylansengul.github.io/blog/2013/12/27/failed-twitter-interview</id>
    <content type="html"><![CDATA[<p>This is my shot at the <a href="http://qandwhat.apps.runkite.com/i-failed-a-twitter-interview/">failed Twitter interview problem</a> with a few extras using Python. The problem is this, given an array of wall heights, find the amount of water filled between these walls after a heavy rain. Suppose the given array is <code>[2,5,1,2,3,4,7,7,6]</code>, then the corresponding picture is:</p>

<pre><code>       WW 
       WWW
 W     WWW
 W     WWW
 W W   WWW
WW W W WWW
WWWWWWWWWW
2513121776
</code></pre>

<p>To get the picture, we define the following function</p>

<pre><code>from __future__ import print_function
def draw_walls(walls):
    """Print an array of wall heights"""
    M = max(walls)  # no of rows
    N = len(walls)  # no of columns
    for i in range(M, 0, -1):
        for j in range(N):
            if walls[j] &gt;= i:
                print('W', end='')
            else:
                print(' ', end='')
        print()
    for i in range(N):
        print(walls[i], end='')
</code></pre>

<p>and then call</p>

<pre><code>draw_walls([2,5,1,2,3,4,7,7,6])
</code></pre>

<p>Anyway, a clever solution is also given in the <a href="http://qandwhat.apps.runkite.com/i-failed-a-twitter-interview/">blog page</a>. Here in addition to finding the total number of filled spaces, the following code will also sketch the walls and the water filled in the walls.</p>

<p>For example, calling</p>

<pre><code>walls = [2, 5, 1, 3, 1, 2, 1, 7, 7, 6]
filled = draw_filled_walls(walls)
print("%d filled spaces" % filled)
</code></pre>

<p>will give</p>

<pre><code>       WW 
       WWW
 W-----WWW
 W-----WWW
 W-W---WWW
WW-W-W-WWW
WWWWWWWWWW
     
17 filled spaces
</code></pre>

<p>Here is my <a href="https://gist.github.com/taylansengul/8158583">solution</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hat-check Problem]]></title>
    <link href="http://taylansengul.github.io/blog/2013/12/24/hat-check-problem/"/>
    <updated>2013-12-24T14:49:11-08:00</updated>
    <id>http://taylansengul.github.io/blog/2013/12/24/hat-check-problem</id>
    <content type="html"><![CDATA[<p>Each of \(n\) customers gives a hat to a hat-check person at a restaurant. The hat-check person gives the hats back to the customers in a random order. What is the expected number of customers who get back their own hat?</p>

<h2 id="solution">Solution</h2>
<p>Let \(X_i\) be 1 if i-th customer gets own hat back and 0 otherwise. 
Clearly
\[
E[X_i] = 0 \times Pr(X_i = 0) + 1 \times Pr(X_i = 1) = 0 + 1 \times 1/n = 1/n.
\]
Let \(X\) be the number of customers who get back their own hat.
Then <script type="math/tex">X = \sum_{i=1}^n X_i.</script>
By linearity 
\[ E[X] = \sum_{i=1}^n E[X_i] = 1. \]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew: A Short Tutorial]]></title>
    <link href="http://taylansengul.github.io/blog/2013/11/25/homebrew/"/>
    <updated>2013-11-25T07:49:38-08:00</updated>
    <id>http://taylansengul.github.io/blog/2013/11/25/homebrew</id>
    <content type="html"><![CDATA[<h2 id="what-is-it">What is it?</h2>
<p>After a certain point in my coding life, I had to download new software which often did not come as executables. Usually I found some instructions on websites on how to install these software. But the process was lengthy and demotivating, mostly installing other dependencies and dependencies of those dependencies and running cryptic commands.</p>

<p>Luckily, if you are using a Mac, there are several package managers which do this job automatically for you. The most popular ones are <a href="http://brew.sh/">Homebrew</a> and <a href="http://www.macports.org/">Macports</a>. In this article, I will talk shortly about Homebrew.</p>

<h2 id="installation">Installation</h2>
<p>To install Homebrew, type</p>

<pre><code>ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
</code></pre>

<p>into your terminal.</p>

<h2 id="basic-usage">Basic Usage</h2>
<p>When you need to install a package, first  <code>brew update</code> to update Homebrew formulas.</p>

<p>Then <code>brew install [formula]</code> to install your package.</p>

<p>If an error occurs, try <code>brew doctor</code> which is Homebrew’s own self-diagnosis tool. This may give you hints on to how to fix the problem.</p>

<h2 id="some-useful-commands">Some Useful Commands</h2>

<p><code>brew upgrade</code> to update installed software</p>

<p><code>brew uninstall [formula]</code> to uninstall a package</p>

<p><code>brew list</code> to list installed packages</p>

<p><code>brew reinstall [formula]</code> will uninstall and install a package</p>

<p><code>brew tap [repo]</code>  opens a new tap(repo) to expand your options of installable software.</p>

<h2 id="some-useful-packages">Some Useful Packages</h2>
<p>There are many packages out there. Here are two I found quite useful when downloading and converting videos from the web.</p>

<p><code>ffmpeg</code>: video and audio converter</p>

<p><code>youtube-dl</code>: download videos from youtube.com or other video platforms</p>

<h2 id="sources">Sources</h2>
<ul>
  <li>
    <p><a href="https://github.com/mxcl/homebrew/wiki/FAQ">Homebrew wiki</a></p>
  </li>
  <li>
    <p><a href="http://mac.tutsplus.com/tutorials/terminal/homebrew-demystified-os-xs-ultimate-package-manager/">mac.tutsplus.com</a></p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
